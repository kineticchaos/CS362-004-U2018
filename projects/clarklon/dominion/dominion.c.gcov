        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 251 returned 100% blocks executed 100%
      251:    8:int compare(const void* a, const void* b) {
      251:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       25:   10:    return 1;
      226:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
      116:   12:    return -1;
      110:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 88%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       20:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 13 returned 100% blocks executed 100%
       13:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       13:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       13:  209:  if (state->deckCount[player] < 1)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      164:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      681:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
      541:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      152:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 93%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        4:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        3:  289:    return -1;
        1:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 7 returned 100% blocks executed 100%
        7:  320:int supplyCount(int card, struct gameState *state) {
        7:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 12 returned 100% blocks executed 100%
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 33 returned 100% blocks executed 38%
       33:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       33:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       33:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       33:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       33:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       33:  576:    state->deckCount[player]--;
       33:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       33:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 32 returned 100% blocks executed 100%
       32:  583:int getCost(int cardNumber)
        -:  584:{
       32:  585:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 13%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 6%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 3%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        4:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
        4:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
        4:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        4:  657:  int drawntreasure=0;
        4:  658:  int z = 0;// this is the counter for the temp hand
        4:  659:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  660:    nextPlayer = 0;
        -:  661:  }
        -:  662:  
        -:  663:	
        -:  664:  //uses switch to select card and perform actions
        4:  665:  switch( card ) 
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 25%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:    {
        -:  667:    case adventurer:
        1:  668:      return adventurerCard(z, drawntreasure, state, currentPlayer, temphand);
call    0 returned 100%
        -:  669:			
        -:  670:    case council_room:
        1:  671:      return council_roomCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  672:			
        -:  673:    case feast:
        1:  674:      return feastCard(state, currentPlayer, temphand, choice1);
call    0 returned 100%
        -:  675:      			
        -:  676:    case gardens:
    #####:  677:      return -1;
        -:  678:			
        -:  679:    case mine:
    #####:  680:      return mineCard(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  681:			
        -:  682:    case remodel:
    #####:  683:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  684:
    #####:  685:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  686:	{
    #####:  687:	  return -1;
        -:  688:	}
        -:  689:
    #####:  690:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  691:
        -:  692:      //discard card from hand
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  694:
        -:  695:      //discard trashed card
    #####:  696:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  699:	    {
    #####:  700:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  701:	      break;
        -:  702:	    }
        -:  703:	}
        -:  704:
        -:  705:
    #####:  706:      return 0;
        -:  707:		
        -:  708:    case smithy:
        1:  709:      return smithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  710:      		
        -:  711:    case village:
        -:  712:      //+1 Card
    #####:  713:      drawCard(currentPlayer, state);
call    0 never executed
        -:  714:			
        -:  715:      //+2 Actions
    #####:  716:      state->numActions = state->numActions + 2;
        -:  717:			
        -:  718:      //discard played card from hand
    #####:  719:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  720:      return 0;
        -:  721:		
        -:  722:    case baron:
    #####:  723:      state->numBuys++;//Increase buys by 1!
    #####:  724:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  725:	int p = 0;//Iterator for hand!
    #####:  726:	int card_not_discarded = 1;//Flag for discard set!
    #####:  727:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  728:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  729:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  730:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  731:	    state->discardCount[currentPlayer]++;
    #####:  732:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  733:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  734:	    }
    #####:  735:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  736:	    state->handCount[currentPlayer]--;
    #####:  737:	    card_not_discarded = 0;//Exit the loop
        -:  738:	  }
    #####:  739:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  740:	    if(DEBUG) {
        -:  741:	      printf("No estate cards in your hand, invalid choice\n");
        -:  742:	      printf("Must gain an estate if there are any\n");
        -:  743:	    }
    #####:  744:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  745:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  746:	      state->supplyCount[estate]--;//Decrement estates
    #####:  747:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  748:		isGameOver(state);
call    0 never executed
        -:  749:	      }
        -:  750:	    }
    #####:  751:	    card_not_discarded = 0;//Exit the loop
        -:  752:	  }
        -:  753:			    
        -:  754:	  else{
    #####:  755:	    p++;//Next card
        -:  756:	  }
        -:  757:	}
        -:  758:      }
        -:  759:			    
        -:  760:      else{
    #####:  761:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  762:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  763:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  764:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  765:	    isGameOver(state);
call    0 never executed
        -:  766:	  }
        -:  767:	}
        -:  768:      }
        -:  769:	    
        -:  770:      
    #####:  771:      return 0;
        -:  772:		
        -:  773:    case great_hall:
        -:  774:      //+1 Card
    #####:  775:      drawCard(currentPlayer, state);
call    0 never executed
        -:  776:			
        -:  777:      //+1 Actions
    #####:  778:      state->numActions++;
        -:  779:			
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  782:      return 0;
        -:  783:		
        -:  784:    case minion:
        -:  785:      //+1 action
    #####:  786:      state->numActions++;
        -:  787:			
        -:  788:      //discard card from hand
    #####:  789:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  790:			
    #####:  791:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  792:	{
    #####:  793:	  state->coins = state->coins + 2;
        -:  794:	}
        -:  795:			
    #####:  796:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  797:	{
        -:  798:	  //discard hand
    #####:  799:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  800:	    {
    #####:  801:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  802:	    }
        -:  803:				
        -:  804:	  //draw 4
    #####:  805:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  806:	    {
    #####:  807:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  808:	    }
        -:  809:				
        -:  810:	  //other players discard hand and redraw if hand size > 4
    #####:  811:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  812:	    {
    #####:  813:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  814:		{
    #####:  815:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  816:		    {
        -:  817:		      //discard hand
    #####:  818:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  819:			{
    #####:  820:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  821:			}
        -:  822:							
        -:  823:		      //draw 4
    #####:  824:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  825:			{
    #####:  826:			  drawCard(i, state);
call    0 never executed
        -:  827:			}
        -:  828:		    }
        -:  829:		}
        -:  830:	    }
        -:  831:				
        -:  832:	}
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case steward:
    #####:  836:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  837:	{
        -:  838:	  //+2 cards
    #####:  839:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  840:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  841:	}
    #####:  842:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  843:	{
        -:  844:	  //+2 coins
    #####:  845:	  state->coins = state->coins + 2;
        -:  846:	}
        -:  847:      else
        -:  848:	{
        -:  849:	  //trash 2 cards in hand
    #####:  850:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  851:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  852:	}
        -:  853:			
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  856:      return 0;
        -:  857:		
        -:  858:    case tribute:
    #####:  859:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  860:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  861:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  862:	  state->deckCount[nextPlayer]--;
        -:  863:	}
    #####:  864:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  865:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  866:	  state->discardCount[nextPlayer]--;
        -:  867:	}
        -:  868:	else{
        -:  869:	  //No Card to Reveal
        -:  870:	  if (DEBUG){
        -:  871:	    printf("No cards to reveal\n");
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      else{
    #####:  877:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  878:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  879:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  880:	    state->deckCount[nextPlayer]++;
    #####:  881:	    state->discard[nextPlayer][i] = -1;
    #####:  882:	    state->discardCount[nextPlayer]--;
        -:  883:	  }
        -:  884:			    
    #####:  885:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  886:	} 
    #####:  887:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  888:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  889:	state->deckCount[nextPlayer]--;
    #####:  890:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  891:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  892:	state->deckCount[nextPlayer]--;
        -:  893:      }    
        -:  894:		       
    #####:  895:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  896:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  897:	state->playedCardCount++;
    #####:  898:	tributeRevealedCards[1] = -1;
        -:  899:      }
        -:  900:
    #####:  901:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  902:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  903:	  state->coins += 2;
        -:  904:	}
        -:  905:		    
    #####:  906:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  907:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  908:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  909:	}
        -:  910:	else{//Action Card
    #####:  911:	  state->numActions = state->numActions + 2;
        -:  912:	}
        -:  913:      }
        -:  914:	    
    #####:  915:      return 0;
        -:  916:		
        -:  917:    case ambassador:
    #####:  918:      j = 0;		//used to check if player has enough cards to discard
        -:  919:
    #####:  920:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  921:	{
    #####:  922:	  return -1;				
        -:  923:	}
        -:  924:
    #####:  925:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  926:	{
    #####:  927:	  return -1;
        -:  928:	}
        -:  929:
    #####:  930:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  931:	{
    #####:  932:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  933:	    {
    #####:  934:	      j++;
        -:  935:	    }
        -:  936:	}
    #####:  937:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  return -1;				
        -:  940:	}
        -:  941:
        -:  942:      if (DEBUG) 
        -:  943:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  944:
        -:  945:      //increase supply count for choosen card by amount being discarded
    #####:  946:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  947:			
        -:  948:      //each other player gains a copy of revealed card
    #####:  949:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:	    {
    #####:  953:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  954:	    }
        -:  955:	}
        -:  956:
        -:  957:      //discard played card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  959:
        -:  960:      //trash copies of cards returned to supply
    #####:  961:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  962:	{
    #####:  963:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  966:		{
    #####:  967:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  968:		  break;
        -:  969:		}
        -:  970:	    }
        -:  971:	}			
        -:  972:
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case cutpurse:
        -:  976:
    #####:  977:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  978:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  981:	    {
    #####:  982:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  983:		{
    #####:  984:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  985:		    {
    #####:  986:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  987:		      break;
        -:  988:		    }
    #####:  989:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  990:		    {
    #####:  991:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  992:			{
        -:  993:			  if (DEBUG)
        -:  994:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  995:			}	
    #####:  996:		      break;
        -:  997:		    }		
        -:  998:		}
        -:  999:					
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}				
        -: 1003:
        -: 1004:      //discard played card from hand
    #####: 1005:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1006:
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:		
        -: 1010:    case embargo: 
        -: 1011:      //+2 Coins
    #####: 1012:      state->coins = state->coins + 2;
        -: 1013:			
        -: 1014:      //see if selected pile is in play
    #####: 1015:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1016:	{
    #####: 1017:	  return -1;
        -: 1018:	}
        -: 1019:			
        -: 1020:      //add embargo token to selected supply pile
    #####: 1021:      state->embargoTokens[choice1]++;
        -: 1022:			
        -: 1023:      //trash card
    #####: 1024:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case outpost:
        -: 1028:      //set outpost flag
    #####: 1029:      state->outpostPlayed++;
        -: 1030:			
        -: 1031:      //discard card
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case salvager:
        -: 1036:      //+1 buy
    #####: 1037:      state->numBuys++;
        -: 1038:			
    #####: 1039:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1040:	{
        -: 1041:	  //gain coins equal to trashed card
    #####: 1042:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1043:	  //trash card
    #####: 1044:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1045:	}
        -: 1046:			
        -: 1047:      //discard card
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case sea_hag:
    #####: 1052:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1054:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1055:	  state->discardCount[i]++;
    #####: 1056:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1057:	}
        -: 1058:      }
    #####: 1059:      return 0;
        -: 1060:		
        -: 1061:    case treasure_map:
        -: 1062:      //search hand for another treasure_map
    #####: 1063:      index = -1;
    #####: 1064:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1065:	{
    #####: 1066:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1067:	    {
    #####: 1068:	      index = i;
    #####: 1069:	      break;
        -: 1070:	    }
        -: 1071:	}
    #####: 1072:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1073:	{
        -: 1074:	  //trash both treasure cards
    #####: 1075:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1076:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1077:
        -: 1078:	  //gain 4 Gold cards
    #####: 1079:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1082:	    }
        -: 1083:				
        -: 1084:	  //return success
    #####: 1085:	  return 1;
        -: 1086:	}
        -: 1087:			
        -: 1088:      //no second treasure_map found in hand
    #####: 1089:      return -1;
        -: 1090:    }
        -: 1091:	
    #####: 1092:  return -1;
        -: 1093:}
        -: 1094:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1095:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1096:{
        -: 1097:	
        -: 1098:  //if card is not trashed, added to Played pile 
        2: 1099:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1100:    {
        -: 1101:      //add card to played pile
        2: 1102:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1103:      state->playedCardCount++;
        -: 1104:    }
        -: 1105:	
        -: 1106:  //set played card to -1
        2: 1107:  state->hand[currentPlayer][handPos] = -1;
        -: 1108:	
        -: 1109:  //remove card from player's hand
        2: 1110:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1111:    {
        -: 1112:      //reduce number of cards in hand
    #####: 1113:      state->handCount[currentPlayer]--;
        -: 1114:    }
        2: 1115:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1116:    {
        -: 1117:      //reduce number of cards in hand
    #####: 1118:      state->handCount[currentPlayer]--;
        -: 1119:    }
        -: 1120:  else 	
        -: 1121:    {
        -: 1122:      //replace discarded card with last card in hand
        2: 1123:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1124:      //set last card to -1
        2: 1125:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1126:      //reduce number of cards in hand
        2: 1127:      state->handCount[currentPlayer]--;
        -: 1128:    }
        -: 1129:	
        2: 1130:  return 0;
        -: 1131:}
        -: 1132:
function gainCard called 2 returned 100% blocks executed 80%
        2: 1133:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1134:{
        -: 1135:  //Note: supplyPos is enum of choosen card
        -: 1136:	
        -: 1137:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1138:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1139:    {
    #####: 1140:      return -1;
        -: 1141:    }
        -: 1142:	
        -: 1143:  //added card for [whoseTurn] current player:
        -: 1144:  // toFlag = 0 : add to discard
        -: 1145:  // toFlag = 1 : add to deck
        -: 1146:  // toFlag = 2 : add to hand
        -: 1147:
        2: 1148:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1149:    {
    #####: 1150:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1151:      state->deckCount[player]++;
        -: 1152:    }
        2: 1153:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1154:    {
        1: 1155:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1156:      state->handCount[player]++;
        -: 1157:    }
        -: 1158:  else
        -: 1159:    {
        1: 1160:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1161:      state->discardCount[player]++;
        -: 1162:    }
        -: 1163:	
        -: 1164:  //decrease number in supply pile
        2: 1165:  state->supplyCount[supplyPos]--;
        -: 1166:	 
        2: 1167:  return 0;
        -: 1168:}
        -: 1169:
function updateCoins called 6 returned 100% blocks executed 82%
        6: 1170:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1171:{
        -: 1172:  int i;
        -: 1173:	
        -: 1174:  //reset coin count
        6: 1175:  state->coins = 0;
        -: 1176:
        -: 1177:  //add coins for each Treasure card in player's hand
       36: 1178:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1179:    {
       30: 1180:      if (state->hand[player][i] == copper)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -: 1181:	{
       25: 1182:	  state->coins += 1;
        -: 1183:	}
        5: 1184:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1185:	{
    #####: 1186:	  state->coins += 2;
        -: 1187:	}
        5: 1188:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1189:	{
    #####: 1190:	  state->coins += 3;
        -: 1191:	}	
        -: 1192:    }	
        -: 1193:
        -: 1194:  //add bonus
        6: 1195:  state->coins += bonus;
        -: 1196:
        6: 1197:  return 0;
        -: 1198:}
        -: 1199:
        -: 1200://refactored Smithy card from cardEffect to its own function
        -: 1201://BUG: Reverse symbol, which would make it so the player never draws cards
function smithyCard called 1 returned 100% blocks executed 71%
        1: 1202:int smithyCard(int currentPlayer, struct gameState *state, int handPos)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:
        -: 1206:  //+3 Cards
        -: 1207:  //BUG: Will imediately evaluate to false and not run at all, giving user no cards
        1: 1208:  for (i = 0; i > 3; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1209:  {
    #####: 1210:    drawCard(currentPlayer, state);
call    0 never executed
        -: 1211:  }
        -: 1212:  
        -: 1213:  //discard card from hand
        1: 1214:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1215:
        -: 1216:  //return
        1: 1217:  return 0;
        -: 1218:}
        -: 1219:
        -: 1220://refactored Adventurer card from cardEffect to its own function
        -: 1221:////BUG: Early reshuffule called by calling function when deck size is equal to 1
function adventurerCard called 1 returned 100% blocks executed 93%
        1: 1222:int adventurerCard(int z, int drawntreasure, struct gameState *state, int currentPlayer, int temphand[])
        -: 1223:{
        5: 1224:  while(drawntreasure<2){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1225:    //BUG: Should be only '< 1' to prompt reshuffle. Here the inclusion of the additional '=' symbol will cause early reshuffle.
        3: 1226:    if (state->deckCount[currentPlayer] <= 1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1227:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1228:    }
        3: 1229:    drawCard(currentPlayer, state);
call    0 returned 100%
        3: 1230:    int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3: 1231:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2: 1232:      drawntreasure++;
        -: 1233:    else{
        1: 1234:      temphand[z]=cardDrawn;
        1: 1235:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1: 1236:      z++;
        -: 1237:    }
        -: 1238:  }
        -: 1239:  
        3: 1240:  while(z-1>=0){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1: 1241:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1: 1242:    z=z-1;
        -: 1243:  }
        1: 1244:  return 0;
        -: 1245:}
        -: 1246:
        -: 1247://refactored Council Room card from cardEffect to its own function
        -: 1248://BUG: Decrease the number of buys, by inverting the symbols 
function council_roomCard called 1 returned 100% blocks executed 100%
        1: 1249:int council_roomCard(int currentPlayer, struct gameState *state, int handPos)
        -: 1250:{
        -: 1251:  int i;
        -: 1252:
        -: 1253:  //+4 Cards
        5: 1254:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1255:  {
        4: 1256:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1257:  }
        -: 1258:
        -: 1259:  //+1 Buy
        -: 1260:  //BUG: Instead of +1 Buy, becomes -1 Buy
        1: 1261:  state->numBuys--;
        -: 1262:
        -: 1263:  //Each other player draws a card
        3: 1264:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1265:  {
        2: 1266:    if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1267:    {
        1: 1268:      drawCard(i, state);
call    0 returned 100%
        -: 1269:    }
        -: 1270:  }
        -: 1271:
        -: 1272:  //put played card in played card pile
        1: 1273:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1274:  return 0;
        -: 1275:}
        -: 1276:
        -: 1277://refactored Feast card from cardEffect to its own function
        -: 1278://BUG: changed argument of gainCard method used to add the card to your hand instead of discard (where it should go).
function feastCard called 1 returned 100% blocks executed 94%
        1: 1279:int feastCard(struct gameState *state, int currentPlayer, int temphand[], int choice1)
        -: 1280:{
        -: 1281:  int i;
        -: 1282:  int x;
        -: 1283:
        -: 1284:  //gain card with cost up to 5
        -: 1285:  //Backup hand
        7: 1286:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6: 1287:    temphand[i] = state->hand[currentPlayer][i];//Backup card
        6: 1288:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1289:  }
        -: 1290:
        -: 1291:  //Backup hand
        -: 1292:  //Update Coins for Buy
        1: 1293:  updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1: 1294:  x = 1;//Condition to loop on
        3: 1295:  while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1: 1296:    if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1297:      if (DEBUG)
        -: 1298:        printf("None of that card left, sorry!\n");
        -: 1299:
        -: 1300:      if (DEBUG){
        -: 1301:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1302:      }
        -: 1303:    }
        1: 1304:    else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1305:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1306:
        -: 1307:      if (DEBUG){
        -: 1308:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1309:      }
        -: 1310:    }
        -: 1311:    else{
        -: 1312:      if (DEBUG){
        -: 1313:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1314:      }
        -: 1315:
        -: 1316:      //BUG: by changing '0' to '2' in the gainCard method, we add the gained card to our hand, when we should add to discard
        1: 1317:      gainCard(choice1, state, 2, currentPlayer);//Gain the card
call    0 returned 100%
        1: 1318:      x = 0;//No more buying cards
        -: 1319:
        -: 1320:      if (DEBUG){
        -: 1321:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1322:      }
        -: 1323:    }
        -: 1324:  }
        -: 1325:
        -: 1326:  //Reset Hand
        8: 1327:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        7: 1328:    state->hand[currentPlayer][i] = temphand[i];
        7: 1329:    temphand[i] = -1;
        -: 1330:  }
        -: 1331:  //Reset Hand
        -: 1332:
        1: 1333:  return 0;
        -: 1334:}
        -: 1335:
function mineCard called 0 returned 0% blocks executed 0%
    #####: 1336:int mineCard(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:  int j;
    #####: 1340:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1341:
    #####: 1342:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1343:  {
    #####: 1344:    return -1;
        -: 1345:  }
        -: 1346:
    #####: 1347:  if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1348:  {
    #####: 1349:    return -1;
        -: 1350:  }
        -: 1351:
    #####: 1352:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1353:  {
    #####: 1354:    return -1;
        -: 1355:  }
        -: 1356:
    #####: 1357:  gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -: 1358:
        -: 1359:  //discard card from hand
    #####: 1360:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1361:
        -: 1362:  //discard trashed card
    #####: 1363:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1364:  {
    #####: 1365:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1366:    {
    #####: 1367:      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1368:      break;
        -: 1369:    }
        -: 1370:  }
        -: 1371:
    #####: 1372:  return 0;
        -: 1373:}
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
